{"version":3,"sources":["../package.json","scripts/index.js"],"names":["module","exports","name","version","description","keywords","homepage","bugs","url","email","license","author","repository","type","scripts","test","start","build","devDependencies","acorn","autoprefixer","eslint","stylelint","private","currentWeather","darkSkyUrl","darkSkyExclusions","darkSkyUnits","googleMapsUrls","navigator","geolocation","defaultUnit","daysToForecast","dayNames","currentUnit","bodyElement","$","loaderElement","weatherPanelElement","temperatureElement","unitElements","cityElement","countryElement","currentConditionElement","versionElement","skycons","window","Skycons","monochrome","resizeClear","getDayName","date","Date","getDay","displayErrorMessage","message","html","handleUnsupportedGeolocation","handleGetLocationNameSuccess","res","results","address_components","forEach","address","types","long_name","getLocationName","coords","latitude","longitude","get","done","celsiusToFahrenheit","temp","updateCurrentTemperature","tempInCelsius","currently","temperature","tempRounded","Math","round","updateForecast","updateIcons","i","forecast","daily","data","day","time","highInCelsius","temperatureHigh","high","highRounded","lowInCelsius","temperatureLow","low","lowRounded","add","icon","handleGetWeatherSuccess","summary","addClass","removeClass","handleGetWeatherError","getWeather","ajax","dataType","fail","handleGetCurrentPositionSuccess","position","handleGetCurrentPositionError","err","handleSupportedGeolocation","getCurrentPosition","enableHighAccuracy","timeout","handleUnitChange","e","target","value","play","click","text"],"mappings":"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","file":"scripts.e87fe33e.js","sourceRoot":"../src","sourcesContent":["module.exports={name:\"weather-app\",version:\"2.0.1\",description:\"Intermediate Front End Development Project for FreeCodeCamp\",keywords:[\"weather app\",\"freecodecamp\"],homepage:\"https://weatherapp.mikelowe.xyz/\",bugs:{url:\"https://github.com/vanillaSlice/WeatherApp/issues\",email:\"mikelowedev@gmail.com\"},license:\"MIT\",author:{name:\"Mike Lowe\",email:\"mikelowedev@gmail.com\",url:\"https://www.mikelowe.xyz/\"},repository:{type:\"git\",url:\"https://github.com/vanillaSlice/WeatherApp.git\"},scripts:{test:\"run-s test:*\",\"test:lint\":\"run-s test:lint:*\",\"test:lint:css\":\"stylelint src/**/*.css\",\"test:lint:js\":\"eslint src/**/*.js\",start:\"parcel src/index.html -d build\",build:\"parcel build src/index.html -d build --public-url ./\"},devDependencies:{acorn:\"^6.0.6\",autoprefixer:\"^9.4.7\",eslint:\"^5.13.0\",\"eslint-config-airbnb-base\":\"^13.1.0\",\"eslint-plugin-import\":\"^2.16.0\",\"npm-run-all\":\"^4.1.5\",\"parcel-bundler\":\"^1.12.3\",\"parcel-plugin-browserconfig\":\"^1.0.0\",stylelint:\"^9.10.1\",\"stylelint-config-recommended\":\"^2.1.0\"},private:!0};","import { version } from '../../package.json';\n\n/*\n * Constants\n */\n\nconst darkSkyUrl = 'https://api.darksky.net/forecast/63b249ea29dd4b09ae0118ebe17b4499';\nconst darkSkyExclusions = 'minutely,hourly,alerts,flags';\nconst darkSkyUnits = 'si';\nconst googleMapsUrls = 'https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyDWfRSVrdwP_pLYXBVDHvh3pSRYUQGFx5Y';\nconst { geolocation } = navigator;\nconst defaultUnit = 'c';\nconst daysToForecast = 7;\nconst dayNames = [\n  'Sun',\n  'Mon',\n  'Tue',\n  'Wed',\n  'Thu',\n  'Fri',\n  'Sat',\n];\n\n/*\n * Variables\n */\n\nlet currentUnit = defaultUnit;\nlet currentWeather;\n\n/*\n * DOM Elements\n */\n\nconst bodyElement = $('.js-body');\nconst loaderElement = $('.js-loader');\nconst weatherPanelElement = $('.js-weather-panel');\nconst temperatureElement = $('.js-temperature');\nconst unitElements = $('.js-unit');\nconst cityElement = $('.js-city');\nconst countryElement = $('.js-country');\nconst currentConditionElement = $('.js-current-condition');\nconst versionElement = $('.js-version');\n\n/*\n * Skycons setup.\n */\n\nconst skycons = new window.Skycons({\n  monochrome: false,\n  resizeClear: true,\n});\nskycons.play();\n\n/*\n * Functions\n */\n\nfunction getDayName(date) {\n  return dayNames[new Date(date * 1000).getDay()];\n}\n\nfunction displayErrorMessage(message) {\n  bodyElement.html(`<p class=\"error-message js-error-message\">${message}</p>`);\n}\n\nfunction handleUnsupportedGeolocation() {\n  displayErrorMessage('Geolocation is not supported by this browser');\n}\n\nfunction handleGetLocationNameSuccess(res) {\n  res.results[0].address_components.forEach((address) => {\n    address.types.forEach((type) => {\n      switch (type) {\n        case 'postal_town':\n        case 'locality':\n          cityElement.html(address.long_name);\n          break;\n        case 'country':\n          countryElement.html(address.long_name);\n          break;\n        default:\n          break;\n      }\n    });\n  });\n}\n\nfunction getLocationName(coords) {\n  const url = `${googleMapsUrls}&latlng=${coords.latitude},${coords.longitude}`;\n\n  $.get(url)\n    .done(handleGetLocationNameSuccess);\n}\n\nfunction celsiusToFahrenheit(temp) {\n  return (temp * 9 / 5) + 32;\n}\n\nfunction updateCurrentTemperature() {\n  const tempInCelsius = currentWeather.currently.temperature;\n  const temp = (currentUnit === 'c') ? tempInCelsius : celsiusToFahrenheit(tempInCelsius);\n  const tempRounded = Math.round(temp);\n  temperatureElement.html(`${tempRounded}&deg;`);\n}\n\nfunction updateForecast(updateIcons) {\n  for (let i = 0; i < daysToForecast; i += 1) {\n    const forecast = currentWeather.daily.data[i];\n    const day = (i === 0) ? 'Today' : getDayName(forecast.time);\n    const highInCelsius = forecast.temperatureHigh;\n    const high = (currentUnit === 'c') ? highInCelsius : celsiusToFahrenheit(highInCelsius);\n    const highRounded = Math.round(high);\n    const lowInCelsius = forecast.temperatureLow;\n    const low = (currentUnit === 'c') ? lowInCelsius : celsiusToFahrenheit(lowInCelsius);\n    const lowRounded = Math.round(low);\n    $(`.js-day-${i} .js-day`).html(day);\n    if (updateIcons) {\n      skycons.add(`js-skycon-${i}`, forecast.icon);\n    }\n    $(`.js-day-${i} .js-high`).html(`${highRounded}&deg;`);\n    $(`.js-day-${i} .js-low`).html(`${lowRounded}&deg;`);\n  }\n}\n\nfunction handleGetWeatherSuccess(res) {\n  currentWeather = res;\n\n  skycons.add('js-skycon-current', res.currently.icon);\n\n  updateCurrentTemperature();\n\n  currentConditionElement.html(res.currently.summary);\n\n  updateForecast(true);\n\n  loaderElement.addClass('hidden');\n\n  weatherPanelElement.addClass('fade-in').removeClass('hidden');\n}\n\nfunction handleGetWeatherError() {\n  displayErrorMessage('Could not retrieve weather data');\n}\n\nfunction getWeather(coords) {\n  const url = `${darkSkyUrl}/${coords.latitude},${coords.longitude}?exclude=${darkSkyExclusions}&units=${darkSkyUnits}`;\n\n  $.ajax({ url, dataType: 'jsonp' })\n    .done(handleGetWeatherSuccess)\n    .fail(handleGetWeatherError);\n}\n\nfunction handleGetCurrentPositionSuccess(position) {\n  const { coords } = position;\n\n  getLocationName(coords);\n  getWeather(coords);\n}\n\nfunction handleGetCurrentPositionError(err) {\n  displayErrorMessage(`Could not get current position: ${err.message}`);\n}\n\nfunction handleSupportedGeolocation() {\n  geolocation.getCurrentPosition(\n    handleGetCurrentPositionSuccess,\n    handleGetCurrentPositionError,\n    {\n      enableHighAccuracy: true,\n      timeout: 5000,\n    },\n  );\n}\n\nfunction handleUnitChange(e) {\n  currentUnit = e.target.value;\n  updateCurrentTemperature();\n  updateForecast(false);\n}\n\n/*\n * Initialise\n */\n\nif (!geolocation) {\n  handleUnsupportedGeolocation();\n} else {\n  handleSupportedGeolocation();\n}\n\nunitElements.click(handleUnitChange);\nversionElement.text(`v${version}`);\n"]}